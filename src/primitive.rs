fn main() {
  // プリミティブ型
  // Rustに組み込まれている型
  // 標準ライブラリにもかなりの数の便利な型があるがプリミティブ型が最も原始的である

  // ブーリアン型
  let x = true;
  let y: bool = false;

  // Char型
  // 他の言語と違い1byteではなく4byteのため記号や日本語も可能(Unicode)
  let x = 'x';
  let two_hearts = '💕';

  // 数値型
  // 符合あり, 符合なしや固定長, 可変長や浮動小数点数, 整数などの分類がある
  // もし数値の変数束縛が型を指定していなかったり、推論できなければ
  // 以下のようなデフォルトになる
  let x = 42;  // i32型
  let y = 1.0; // f63型

  // 符合ありと符合なし
  // 符合なしは符合ありに比べて単純に倍の絶対値の数まで扱える
  let x: i32 = -12; // 符合ありは"integer"の「i」を頭文字に
  let y: u32 = 12;  // 符合なしは"unsigned"の「u」を頭文字に

  // 固定長型
  // iやuに続く数字は保持できる数値のビット数
  let x: i8 = 234;       // 8bit長
  let y: u64 = 34123124; // 64bit長

  // 可変長型
  // 符合ありと符合なしが存在する
  let x: isize = -213124;
  let y: usize = 32412;

  // 浮動小数点型
  // 32bit長と64bit長がある
  let x: f32 = 32.413;
  let y: f64 = -434.5521;

  // 配列
  // 固定長の同じ型の要素のリスト
  // デフォルトでは変更不可
  // 配列は[T; N]という型で表される
  let a = [1, 2, 3];     // a: [i32; 3]
  let mut m = [1, 2, 3]; // m: [i32; 3]

  // 各要素をその型のデフォルト値で初期化する省略表現がある
  let a = [0; 20]; // aは[i32; 20]型で0で埋められている

  // 長さはlenメソッドで
  // 各要素はインデックスでアクセス可能
  let alen = a.len();
  let a0 = a[0];

  // スライス
  // 他のデータ構造への安全な参照(コピーではない)
  // &[T]型である
  let a = [0, 1, 2, 3, 4];
  let complete = &a[..]; // aに含まれる全ての要素をもつスライス
  let middle = &a[1..4]; // 1,2,3のみを要素にもつスライス

  // タプル
  // 固定サイズの順序ありリスト
  let x: (i32, &str) = (1, "Hello");

  // 同様の型であれば割り当て可能
  let y: (i32, &str) = x;

  // タプルのフィールドには分配束縛を通じてアクセスできる
  // 右辺のタプルを分割して変数束縛したと考えるべき
  let (x, y, z) = (1, 2, 3);
  // インデックス構文でもアクセス可能、[]を用いないことに注意
  let tuple = (1, 2, 3);
  let x = tuple.0;
  let y = tuple.1;
  let z = tuple.2;

  // 関数型
  fn foo(x: i32) -> i32 { x }
  let x: fn(i32) -> i32 = foo;

  // コメントは//以降の文をコンパイラ対象から外すメモ
  /// こうするとドキュメンテーションコメントというMarkdown記法でかける
  /// 与えられた数値に1を加える
  ///
  /// # Example
  ///
  /// ```
  /// let five = 5;
  ///
  /// assert_eq!(6, add_one(5));
  /// # fn add_one(x: i32) -> i32 {
  /// #   x + 1
  /// # }
  /// ```
  fn add_one(x: i32) -> i32 {
    x + 1
  }
  //! これはこの後に続く要素を説明するものではなく、
  //! それを含んでいる要素(クレート, モジュール, 関数など)を説明するもの
  //! クレートルート(lib.rs)やモジュールルート(mod.rs)で使う
}
